{"version":3,"sources":["../../src/routes/index.js"],"names":["UsersStorage","diskStorage","destination","filename","req","file","cb","originalname","centersStorage","eventsStorage","usersUpload","storage","centersUpload","eventsUpload","config","eventCenters","events","users","notifications","Routes","securedApi","Router","app","get","res","status","sendFile","join","__dirname","use","serve","setup","post","single","signup","signin","delete","deleteUser","getUsers","next","token","body","headers","promise","Promise","resolve","reject","verify","process","env","SECRET_KEY","err","decode","send","getUser","put","updateUsers","addEventCenter","getEventCenters","getEventCenter","getCenterByName","getCenterByLocation","updateEventCenter","deleteEventCenter","addEvent","updateEvent","getEvents","getCenterEvents","getEvent","deleteEvent","getUsersEvents","createNotification","getAllNotifications","getNotifications"],"mappings":"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","file":"index.js","sourcesContent":["\r\n// import controllers\r\nimport dotenv from 'dotenv';\r\nimport express from 'express';\r\nimport multer from 'multer';\r\nimport jwt from 'jsonwebtoken';\r\nimport path from 'path';\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport swaggerDocument from './../../../api/swagger/swagger.json';\r\nimport EventCenterController from './../controllers/eventCenterController';\r\nimport EventsController from './../controllers/eventController';\r\nimport UsersController from './../controllers/usersController';\r\nimport Notifications from './../controllers/notificationsController';\r\n\r\n/**\r\nthe below is the alternative way to direct upload and multer will generate a random file\r\nname for you without an extentions\r\nconst usersDest = './public/users-photo/';\r\nconst usersUpload = multer({dest: usersDest});\r\n*/\r\nconst UsersStorage = multer.diskStorage({\r\n  destination: './public/users-photo/',\r\n  filename: (req, file, cb) => {\r\n    cb(null, file.originalname);\r\n  },\r\n});\r\nconst centersStorage = multer.diskStorage({\r\n  destination: './public/centers-photo/',\r\n  filename: (req, file, cb) => {\r\n    cb(null, file.originalname);\r\n  },\r\n});\r\nconst eventsStorage = multer.diskStorage({\r\n  destination: './public/events-photo/',\r\n  filename: (req, file, cb) => {\r\n    cb(null, file.originalname);\r\n  },\r\n});\r\n\r\n\r\nconst usersUpload = multer({ storage: UsersStorage });\r\nconst centersUpload = multer({ storage: centersStorage });\r\nconst eventsUpload = multer({ storage: eventsStorage });\r\n\r\ndotenv.config();\r\nconst eventCenters = new EventCenterController();\r\nconst events = new EventsController();\r\nconst users = new UsersController();\r\nconst notifications = new Notifications();\r\nconst Routes = class {\r\n  constructor() {\r\n    this.users = users;\r\n    this.events = events;\r\n    this.eventCenters = eventCenters;\r\n    this.securedApi = express.Router();\r\n  }\r\n  routes(app) {\r\n    app.get('/', (req, res) => {\r\n      res.status(200).sendFile(path.join(__dirname, './../../../client/index.html'));\r\n    });\r\n    app.use('/api/v1/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\r\n\r\n    // route for users signup and signin\r\n    app.post('/api/v1/users/signup', usersUpload.single('userPix'), this.users.signup);\r\n    app.post('/api/v1/users/signin', this.users.signin);\r\n    app.delete('/api/v1/users/:userId', this.users.deleteUser);\r\n    app.get('/api/v1/users', this.users.getUsers);\r\n    app.use('/api/v1/secure', this.securedApi);\r\n\r\n    // route controllers for Event Centers\r\n    this.securedApi.use((req, res, next) => {\r\n      const token = req.body.token || req.headers.token;\r\n      /* eslint-disable no-unused-vars */\r\n      const promise = new Promise((resolve, reject) => {\r\n        if (token) {\r\n          jwt.verify(token, process.env.SECRET_KEY, (err, decode) => {\r\n            if (err) {\r\n              resolve(res.status(401).send('Invalid Token'));\r\n            } else {\r\n              resolve(next());\r\n            }\r\n          });\r\n        } else {\r\n          resolve(res.status(402).send('Please send a token'));\r\n        }\r\n      });\r\n      return promise;\r\n    });\r\n\r\n    this.securedApi.get('/users/:userId', this.users.getUser);\r\n    this.securedApi.put('/users/:userId', this.users.updateUsers);\r\n    this.securedApi.post('/centers', centersUpload.single('centerPix'), this.eventCenters.addEventCenter);\r\n    this.securedApi.get('/centers', this.eventCenters.getEventCenters);\r\n    this.securedApi.get('/centers/:centerId', this.eventCenters.getEventCenter);\r\n    this.securedApi.get('/centers/centername/:name', eventCenters.getCenterByName);\r\n    this.securedApi.get('/centers/location/:location', eventCenters.getCenterByLocation);\r\n    this.securedApi.put('/centers/:centerId', this.eventCenters.updateEventCenter);\r\n    this.securedApi.delete('/centers/:centerId', this.eventCenters.deleteEventCenter);\r\n\r\n    // route controllers for events\r\n    this.securedApi.post('/events', eventsUpload.single('eventPix'), this.events.addEvent);\r\n    this.securedApi.put('/events/:eventId', this.events.updateEvent);\r\n    this.securedApi.get('/events', this.events.getEvents);\r\n    this.securedApi.get('/events/centers/:centerId', this.events.getCenterEvents);\r\n    this.securedApi.get('/events/users/:eventId', this.events.getEvent);\r\n    this.securedApi.delete('/events/:eventId', this.events.deleteEvent);\r\n    this.securedApi.get('/events/:userId', this.events.getUsersEvents);\r\n\r\n    // route controllers for notifications\r\n    this.securedApi.post('/notifications', notifications.createNotification);\r\n    this.securedApi.get('/notifications', notifications.getAllNotifications);\r\n    this.securedApi.get('/notifications/:userId', notifications.getNotifications);\r\n  }\r\n};\r\n\r\nexport default Routes;\r\n"]}