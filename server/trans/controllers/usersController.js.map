{"version":3,"sources":["../../src/controllers/usersController.js"],"names":["users","config","UsersController","req","res","find","where","username","body","email","then","user","destination","file","path","passwd1","passwd2","passwd","genSalt","err","salt","hash","create","password","fullname","gender","imgUrl","userType","securityQtn","securityAns","status","send","signup","catch","error","message","passwordConfirmed","hashedPassword","compareSync","authenKey","token","sign","process","env","SECRET_KEY","expiresIn","success","userId","id","parseInt","params","findAll","update","destroy"],"mappings":"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","file":"usersController.js","sourcesContent":["// controller for users signup and signin\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport models from './../models';\r\nimport { getImgUrl } from './../funcs/HelperFuncts'\r\n// const destination = './public/users-photo/';\r\nconst users = models.users;\r\ndotenv.config();\r\nconst UsersController = class {\r\n  // controller for users signup\r\n\r\n  signup(req, res) {\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere: {\r\n\t\t\t\tusername: req.body.username,\r\n\t\t\t\temail:req.body.email\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(user => {\r\n\t\t\tif(!user){\r\n\t\t\t\t\r\n\t\t\t// handle uploaded profile pix\r\n\t\t\t//const photo = req.file.originalname;\r\n\t\t  const destination = getImgUrl( req.file.path);\r\n\t\t\tconst passwd1 = req.body.passwd1;\r\n\t\t\tconst passwd2 = req.body.passwd2;\r\n\t\t\tlet passwd;\r\n\t\t\t\tif(passwd1 === passwd1) {\r\n\t\t\t\t\tbcrypt.genSalt(10, function(err, salt) {\r\n\t\t\t\t\t\tbcrypt.hash(passwd1, salt, function(err, hash) {\r\n\t\t\t\t\t\tpasswd = hash;\r\n\t\t\t\t\t\treturn users\r\n\t\t\t\t\t\t.create({\r\n\t\t\t\t\t\tpassword: passwd,\r\n\t\t\t\t\t\tfullname: req.body.fullname,\r\n\t\t\t\t\t\temail: req.body.email,\r\n\t\t\t\t\t\tusername: req.body.username,\r\n\t\t\t\t\t\tgender: req.body.gender,\r\n\t\t\t\t\t\timgUrl: destination,\r\n\t\t\t\t\t\tuserType:req.body.userType,\r\n\t\t\t\t\t\tsecurityQtn: req.body.securityQtn,\r\n\t\t\t\t\t\tsecurityAns:req.body.securityAns\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then(signup => res.status(201).send(signup))\r\n\t\t\t\t\t.catch(error => res.status(400).send(error));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t}  else {\r\n\t\t\t\t\t// password match fail\r\n\t\t\t\t\tres.status(400).send( {message: 'password does not match'})\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// username already exist\r\n\t\t\t\tres.status(200).send(`user already exist`)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => res.status(500).send(error));\r\n\t}\r\n\r\n\r\n  // controllers for users signin\r\n  signin(req, res) {\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere: {\r\n\t\t\tusername: req.body.username\r\n\t\t\t}\t\r\n\t\t})\r\n\t\t.then(user => {\r\n\t\t\tif(user){\r\n\t\t\t\tlet passwordConfirmed = false;\r\n\t\t\t\tconst hashedPassword = user.password;\r\n\t\t\t\tconst password = req.body.password;\r\n\t\t   passwordConfirmed =\tbcrypt.compareSync(password, hashedPassword);\r\n\t\t\t  if(passwordConfirmed){\r\n\t\t\t\t\tconst authenKey = user['username'];\r\n\t\t\t\t\tconst token = jwt.sign({authenKey}, process.env.SECRET_KEY, {\texpiresIn:'48h'\t});\r\n\t\t\t\t\tres.status(200).send({\r\n\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\tusername:user.username,\r\n\t\t\t\t\t\tuserType: user.userType,\r\n\t\t\t\t\t\tuserId:user.id\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres.status(400).send( {message: 'password is not correct'});\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tres.status(400).send( {message: 'Your username is not correct'});\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => res.status(500).send(error));\r\n\t} \r\n\t// get user by id\r\n\tgetUser(req,res){\r\n\t\tconst userId = parseInt(req.params.userId);\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere:{\r\n\t\t\t\tid:userId\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(user => {\r\n\t\t\tif(user){\r\n\t\t\t\tres.status(200).send(user);\r\n\t\t\t} else {\r\n\t\t\t\tres.status(404).send({ message: 'User not found'})\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => res.status(500).send(error));\r\n\t}\r\n\t\r\n\tgetUsers(req,res){\r\n\t\treturn users\r\n\t\t.findAll()\r\n\t\t.then(user => {\r\n\t\t\tif(user){\r\n\t\t\t\tres.status(200).send(user);\r\n\t\t\t} else {\r\n\t\t\t\tres.status(404).send({ message: 'User not found'})\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => res.status(500).send(error));\r\n\t}\r\n\r\n\tupdateUsers (req, res) {\r\n\t\tconst userId = parseInt(req.params.userId);\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere: {\r\n\t\t\t\tid: userId\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(user => {\r\n\t\t\tif(user) {\r\n\t\t\t\treturn user\r\n\t\t\t\t.update({\r\n\t\t\t\tfullname: req.body.fullname || user.fullname,\r\n\t\t\t\tusername: req.body.username || user.username,\r\n\t\t\t\temail: req.body.email || user.email,\r\n\t\t\t\tgender: req.body.gender || user.gender,\r\n\t\t\t\timgUrl: req.body.imgUrl || user.imgUrl\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(user => res.status(201).send(user))\r\n\t\t.catch(error => res.status(404).send(error));\r\n\t}\r\n\r\n\t// delete user by id\r\n\tdeleteUser(req,res){\r\n\t\tconst userId = parseInt(req.params.userId);\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere:{\r\n\t\t\t\tid:userId\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(user => {\r\n\t\t\tif(user) {\r\n\t\t\treturn user\r\n\t\t\t.destroy({\r\n\t\t\t\twhere:{\r\n\t\t\t\t\tid:userId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(deleted => res.status(200).send({ message: `${user.fullname} has been deleted`}))\r\n\t\t\t.catch(error => res.status(500).send(error));\r\n\t\t\t} else {\r\n        res.status(500).send({ message: 'user not found'});\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\t.catch(error => res.status(500).send(error));\r\n\t}\r\n\t\r\n\r\n}\r\n\r\nexport default UsersController;"]}