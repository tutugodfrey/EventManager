{"version":3,"sources":["../../src/controllers/usersController.js"],"names":["UsersController","req","res","find","where","username","body","then","user","create","firstname","lastname","email","password","imageurl","usertype","status","send","signup","catch","error","signin","message","all"],"mappings":";;;;;;qjBAAA;;;AACA;;;;;;;;AAEA,IAAMA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACJ;AADI,yBAEGC,GAFH,EAEQC,GAFR,EAEa;AACjB,UAAO,gBACNC,IADM,CACD;AACLC,WAAO;AACNC,eAAUJ,IAAIK,IAAJ,CAASD;AADb;AADF,IADC,EAMNE,IANM,CAMD,gBAAQ;AACb,QAAG,CAACC,IAAJ,EAAS;AACT,YAAO,gBACNC,MADM,CACC;AACRC,iBAAWT,IAAIK,IAAJ,CAASI,SADZ;AAERC,gBAAUV,IAAIK,IAAJ,CAASK,QAFX;AAGRC,aAAOX,IAAIK,IAAJ,CAASM,KAHR;AAIRP,gBAAUJ,IAAIK,IAAJ,CAASD,QAJX;AAKRQ,gBAAUZ,IAAIK,IAAJ,CAASO,QALX;AAMLC,gBAAUb,IAAIK,IAAJ,CAASQ,QANd;AAOLC,gBAAUd,IAAIK,IAAJ,CAASS;AAPd,MADD,EAUPR,IAVO,CAUF;AAAA,aAAUL,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,MAArB,CAAV;AAAA,MAVE,EAWPC,KAXO,CAWD;AAAA,aAASjB,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,KAArB,CAAT;AAAA,MAXC,CAAP;AAaC,KAdD,MAcO;AACNlB,SAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,uBAAyChB,IAAIK,IAAJ,CAASD,QAAlD;AACA;AACD,IAxBM,EAyBNc,KAzBM,CAyBA;AAAA,WAASjB,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,KAArB,CAAT;AAAA,IAzBA,CAAP;AA0BA;;AAGA;;AAhCI;AAAA;AAAA,yBAiCGnB,GAjCH,EAiCQC,GAjCR,EAiCa;AACjB,UAAO,gBACNC,IADM,CACD;AACLC,WAAO;AACPC,eAAUJ,IAAIK,IAAJ,CAASD,QADZ;AAEPQ,eAAUZ,IAAIK,IAAJ,CAASO;AAFZ;AADF,IADC,EAONN,IAPM,CAOD,kBAAU;AACf,QAAG,CAACc,MAAJ,EAAY;AACZ,YAAOnB,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC5BK,eAAS;AADmB,MAArB,CAAP;AAGA;;AAED,WAAOd,KACNe,GADM,GAENhB,IAFM,CAED;AAAA,YAAUL,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,MAArB,CAAV;AAAA,KAFC,EAGNF,KAHM,CAGA;AAAA,YAASjB,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,KAArB,CAAT;AAAA,KAHA,CAAP;AAKA,IAnBO,CAAP;AAoBA;AAtDI;;AAAA;AAAA,GAAN;;kBA0DepB,e","file":"usersController.js","sourcesContent":["// controller for users signup and signin\r\nimport users from './../models/users';\r\n\r\nconst UsersController = class {\r\n  // controller for users signup\r\n  signup(req, res) {\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere: {\r\n\t\t\t\tusername: req.body.username,\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(user => {\r\n\t\t\tif(!user){\r\n\t\t\treturn users\r\n\t\t\t.create({\r\n\t\t\tfirstname: req.body.firstname,\r\n\t\t\tlastname: req.body.lastname,\r\n\t\t\temail: req.body.email,\r\n\t\t\tusername: req.body.username,\r\n\t\t\tpassword: req.body.password,\r\n      imageurl: req.body.imageurl,\r\n      usertype: req.body.usertype\r\n\t\t})\r\n\t\t.then(signup => res.status(201).send(signup))\r\n\t\t.catch(error => res.status(400).send(error));\r\n\r\n\t\t\t} else {\r\n\t\t\t\tres.status(201).send(`A user with this ${req.body.username} already exist`)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => res.status(400).send(error));\r\n\t}\r\n\r\n\r\n  // controllers for users signin\r\n  signin(req, res) {\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere: {\r\n\t\t\tusername: req.body.username,\r\n\t\t\tpassword: req.body.password,\r\n\t\t\t}\t\r\n\t\t})\r\n\t\t.then(signin => {\r\n\t\t\tif(!signin) {\r\n\t\t\treturn res.status(400).send({\r\n\t\t\tmessage: 'user does not exist',\r\n\t\t});\r\n\t\t}\r\n\r\n\t\treturn user\r\n\t\t.all()\r\n\t\t.then(signin => res.status(201).send(signin))\r\n\t\t.catch(error => res.status(400).send(error));\r\n\r\n\t});\r\n\t}\r\n\r\n}\r\n\r\nexport default UsersController;"]}