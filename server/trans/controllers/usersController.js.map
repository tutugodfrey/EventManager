{"version":3,"sources":["../../src/controllers/usersController.js"],"names":["users","config","UsersController","req","res","find","where","username","body","email","then","user","destination","file","path","passwd1","passwd2","passwd","genSalt","err","salt","hash","create","password","fullname","gender","imgUrl","userType","securityQtn","securityAns","status","send","signup","catch","error","message","passwordConfirmed","hashedPassword","compareSync","authenKey","token","sign","process","env","SECRET_KEY","expiresIn","success","userId","id","parseInt","params","findAll","update","updatedUser","destroy"],"mappings":"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","file":"usersController.js","sourcesContent":["// controller for users signup and signin\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport models from './../models';\r\nimport { getImgUrl } from './../funcs/HelperFuncts';\r\n\r\n// const destination = './public/users-photo/';\r\nconst { users } = models;\r\ndotenv.config();\r\nconst UsersController = class {\r\n  /* eslint-disable class-methods-use-this */\r\n  // controller for users signup\r\n\tsignup(req, res) {\r\n    return users\r\n      .find({\r\n        where: {\r\n          username: req.body.username,\r\n          email: req.body.email,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (!user) {\r\n          // handle uploaded profile pix\r\n          const destination = getImgUrl(req.file.path);\r\n          const passwd1 = req.body.passwd1;\r\n          const passwd2 = req.body.passwd2;\r\n          let passwd;\r\n          if (passwd1 === passwd2) {\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(passwd1, salt, (err, hash) => {\r\n                passwd = hash;\r\n                return users\r\n                  .create({\r\n                    password: passwd,\r\n                    fullname: req.body.fullname,\r\n                    email: req.body.email,\r\n                    username: req.body.username,\r\n                    gender: req.body.gender,\r\n                    imgUrl: destination,\r\n                    userType: req.body.userType,\r\n                    securityQtn: req.body.securityQtn,\r\n                    securityAns: req.body.securityAns,\r\n                  })\r\n                  .then(signup => res.status(201).send(signup))\r\n                  .catch(error => res.status(400).send(error));\r\n              });\r\n            });\r\n          } else {\r\n\t\t\t\t\t\t// password match fail\r\n\t\t\t\t\t\treturn res.status(400).send({ message: 'password does not match' });\r\n\t\t\t\t\t}\r\n        } else {\r\n\t\t\t\t\t// username already exist\r\n\t\t\t\t\treturn res.status(200).send({ message: 'user already exist' });\r\n\t\t\t\t}\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n\r\n\r\n  // controllers for users signin\r\n  signin(req, res) {\r\n    return users\r\n      .find({\r\n        where: {\r\n          username: req.body.username,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          let passwordConfirmed = false;\r\n          const hashedPassword = user.password;\r\n          const password = req.body.password;\r\n          passwordConfirmed = bcrypt.compareSync(password, hashedPassword);\r\n          if (passwordConfirmed) {\r\n            const authenKey = user.username;\r\n            const token = jwt.sign({ authenKey }, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n            res.status(200).send({\r\n              token,\r\n              success: true,\r\n              username: user.username,\r\n              userType: user.userType,\r\n              userId: user.id,\r\n            });\r\n          } else {\r\n\t\t\t\t\t\treturn res.status(400).send({ message: 'password is not correct' });\r\n\t\t\t\t\t}\r\n        } else {\r\n\t\t\t\t\treturn res.status(400).send({ message: 'Your username is not correct' });\r\n\t\t\t\t}\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n  // get user by id\r\n  getUser(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          res.status(200).send(user);\r\n        }\r\n        return res.status(404).send({ message: 'User not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  getUsers(req, res) {\r\n    return users\r\n      .findAll()\r\n      .then((user) => {\r\n        if (user) {\r\n          res.status(200).send(user);\r\n        }\r\n        return res.status(404).send({ message: 'User not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  updateUsers(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          return user\r\n            .update({\r\n              fullname: req.body.fullname || user.fullname,\r\n              username: req.body.username || user.username,\r\n              email: req.body.email || user.email,\r\n              gender: req.body.gender || user.gender,\r\n              imgUrl: req.body.imgUrl || user.imgUrl,\r\n            })\r\n            .then(updatedUser => res.status(201).send(updatedUser))\r\n            .catch(error => res.status(404).send(error));\r\n        }\r\n        return res.status(404).send({ message: 'user not found' });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // delete user by id\r\n  deleteUser(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          return user\r\n            .destroy({\r\n              where: {\r\n                id: userId,\r\n              },\r\n            })\r\n            .then(() => res.status(200).send({ message: `${user.fullname} has been deleted` }))\r\n            .catch(error => res.status(500).send(error));\r\n        }\r\n        return res.status(500).send({ message: 'user not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n};\r\nexport default UsersController;\r\n"]}