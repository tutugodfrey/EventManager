{"version":3,"sources":["../../src/controllers/usersController.js"],"names":["users","config","UsersController","req","res","find","where","username","body","email","then","user","destination","file","path","passwd1","passwd2","passwd","genSalt","err","salt","hash","hashErr","create","password","fullname","gender","imgUrl","userType","securityQtn","securityAns","signup","status","send","message","id","catch","error","passwordConfirmed","hashedPassword","compareSync","authenKey","token","sign","process","env","SECRET_KEY","expiresIn","success","userId","parseInt","params","findAll","update","updatedUser","destroy"],"mappings":"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","file":"usersController.js","sourcesContent":["// controller for users signup and signin\r\nimport dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport models from './../models';\r\nimport { getImgUrl } from './../funcs/HelperFuncts';\r\n\r\n// const destination = './public/users-photo/';\r\nconst { users } = models;\r\ndotenv.config();\r\nconst UsersController = class {\r\n  /* eslint-disable class-methods-use-this, consistent-return */\r\n  // controller for users signup\r\n  signup(req, res) {\r\n    return users\r\n      .find({\r\n        where: {\r\n          username: req.body.username,\r\n          email: req.body.email,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (!user) {\r\n          // handle uploaded profile pix\r\n          const destination = getImgUrl(req.file.path);\r\n          const { passwd1, passwd2 } = req.body;\r\n          // const passwd2 = req.body.passwd2;\r\n          let passwd;\r\n          if (passwd1 === passwd2) {\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(passwd1, salt, (hashErr, hash) => {\r\n                passwd = hash;\r\n                users\r\n                  .create({\r\n                    password: passwd,\r\n                    fullname: req.body.fullname,\r\n                    email: req.body.email,\r\n                    username: req.body.username,\r\n                    gender: req.body.gender,\r\n                    imgUrl: destination,\r\n                    userType: req.body.userType,\r\n                    securityQtn: req.body.securityQtn,\r\n                    securityAns: req.body.securityAns,\r\n                  })\r\n                  .then((signup) => {\r\n                    res.status(201).send({\r\n                      message: 'signup successful',\r\n                      fullname: signup.fullname,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      id: signup.id,\r\n                    });\r\n                  })\r\n                  .catch(error => res.status(400).send(error));\r\n              });\r\n            });\r\n          } else {\r\n            // password match fail\r\n            return res.status(400).send({ message: 'password does not match' });\r\n          }\r\n        } else {\r\n          // username already exist\r\n          return res.status(200).send({ message: 'user already exist' });\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // controllers for users signin\r\n  signin(req, res) {\r\n    return users\r\n      .find({\r\n        where: {\r\n          username: req.body.username,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          let passwordConfirmed = false;\r\n          const hashedPassword = user.password;\r\n          const { password } = req.body;\r\n          passwordConfirmed = bcrypt.compareSync(password, hashedPassword);\r\n          if (passwordConfirmed) {\r\n            const authenKey = user.username;\r\n            const token = jwt.sign({ authenKey }, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n            res.status(200).send({\r\n              token,\r\n              success: true,\r\n              username: user.username,\r\n              userType: user.userType,\r\n              userId: user.id,\r\n            });\r\n          } else {\r\n            return res.status(400).send({ message: 'password is not correct' });\r\n          }\r\n        } else {\r\n          return res.status(400).send({ message: 'Your username is not correct' });\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n  // get user by id\r\n  getUser(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          res.status(200).send(user);\r\n        }\r\n        return res.status(404).send({ message: 'User not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  getUsers(req, res) {\r\n    return users\r\n      .findAll()\r\n      .then((user) => {\r\n        if (user) {\r\n          res.status(200).send(user);\r\n        }\r\n        return res.status(404).send({ message: 'User not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  updateUsers(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          return user\r\n            .update({\r\n              fullname: req.body.fullname || user.fullname,\r\n              username: req.body.username || user.username,\r\n              email: req.body.email || user.email,\r\n              gender: req.body.gender || user.gender,\r\n              imgUrl: req.body.imgUrl || user.imgUrl,\r\n            })\r\n            .then(updatedUser => res.status(201).send(updatedUser))\r\n            .catch(error => res.status(404).send(error));\r\n        }\r\n        return res.status(404).send({ message: 'user not found' });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // delete user by id\r\n  deleteUser(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          return user\r\n            .destroy({\r\n              where: {\r\n                id: userId,\r\n              },\r\n            })\r\n            .then(() => res.status(200).send({ message: `${user.fullname} has been deleted` }))\r\n            .catch(error => res.status(500).send(error));\r\n        }\r\n        return res.status(500).send({ message: 'user not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n};\r\nexport default UsersController;\r\n"]}