{"version":3,"sources":["../../src/controllers/eventController.js"],"names":["events","centers","users","EventsController","req","res","centerId","parseInt","body","find","where","id","then","eventCenter","eventDate","eventFound","destination","file","path","create","eventType","facilities","imgUrl","userId","status","send","event","catch","error","message","eventId","params","user","update","confirm","updatedEvent","findAll","length","userEvents","destroy"],"mappings":"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","file":"eventController.js","sourcesContent":["\r\nimport models from './../models';\r\nimport { getImgUrl } from './../funcs/HelperFuncts'\r\nconst events = models.events;\r\nconst centers = models.centers;\r\nconst users = models.users;\r\n\r\nconst EventsController = class {\r\n  // controller to add event\r\n  addEvent(req, res) {\r\n    const centerId = parseInt(req.body.centerId);\r\n    return centers\r\n    .find({\r\n      where: { \r\n        id: centerId\r\n      }\r\n    })\r\n    .then(eventCenter => {\r\n      if(eventCenter){\r\n        return events\r\n        .find({\r\n          where:{\r\n            eventDate:req.body.eventDate,\r\n            centerId:centerId\r\n          }\r\n        })\r\n        .then(eventFound => {\r\n          if(!eventFound){\r\n            // const destination = 'req.file.path;'\r\n            const destination = getImgUrl(req.file.path);\r\n            return events\r\n            .create({\r\n              eventType: req.body.eventType,\r\n              eventDate: req.body.eventDate,\r\n              facilities: req.body.facilities,\r\n              imgUrl: destination,\r\n              centerId: parseInt(req.body.centerId),\r\n              userId: parseInt(req.body.userId)\r\n            })\r\n            .then(event => res.status(201).send(event))\r\n            .catch(error => res.status(400).send({error}));\r\n          } else{\r\n            res.status(200).send({ message:`An event is already booked you choose. \r\n            pleasee center the field for upcomming event and centers before choosing you date`});\r\n          }\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n      }  else {\r\n          res.status(404).send({ message: 'Center not found'})\r\n      }\r\n    })\r\n    .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // controll to update event\r\n  updateEvent(req, res) {\r\n    const userId = parseInt(req.body.userId);\r\n    const eventId = parseInt(req.params.eventId);\r\n    return users\r\n    .find({\r\n      where: {\r\n        id: userId\r\n      }\r\n    })\r\n    .then(user => {\r\n      if(user){\r\n        return events\r\n        .find({\r\n          where: {\r\n            id: eventId,\r\n            userId:userId\r\n          }\r\n        })\r\n        .then(event => {\r\n          if(event){\r\n            return event\r\n            .update({\r\n              eventType: req.body.eventType || event.eventType,\r\n              eventDate: req.body.eventDate || event.eventDate,\r\n              facilities: req.body.facilities || event.facilities,\r\n              imgUrl: req.body.imgUrl || event.imgUrl,\r\n              confirm: req.body.confirm || event.confirm,\r\n              userId: req.body.userId || event.userId,\r\n              centerId: req.body.centerId || event.centerId\r\n            })\r\n            .then(updatedEvent => res.status(201).send(updatedEvent))\r\n            .catch(error => res.status(500).send(error)); \r\n          } else {\r\n            res.status(404).send({ message: 'You have not added any event'});\r\n          }\r\n        })\r\n        .catch(error => res.status(500).send(error));  \r\n      } else {\r\n        res.status(404).send({ message: 'Your are not a registered user'});\r\n      }\r\n    })\r\n    .catch(error => res.status(500).send(error)); \r\n  }\r\n\r\n  // controller to get all events given the centerId\r\n  getCenterEvents(req, res) {\r\n    const centerId = parseInt(req.params.centerId)\r\n    return centers\r\n    .find({\r\n      where: {\r\n        id: centerId\r\n      }\r\n    })\r\n    .then(eventCenter => {\r\n      if(eventCenter){\r\n        return events\r\n        .findAll({\r\n          where: {\r\n            centerId:centerId\r\n          }\r\n        })\r\n        .then(events => {\r\n          if(events.length > 0){\r\n            res.status(200).send(events);\r\n          } else {\r\n            res.status(404).send({message: 'No event found for this center'})\r\n          }\r\n        })\r\n        .catch(error => res.status(404).send({ message: 'No event found for this center'}));\r\n      } else {\r\n        res.status(404).send({ message: 'Center not found'})\r\n      }\r\n    })\r\n    .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // controller to get all events given a userId \r\n  getUsersEvents(req, res) {\r\n    const userId = parseInt(req.params.userId);\r\n    return users\r\n    .find({\r\n      where: {\r\n        id: userId\r\n      }\r\n    })\r\n    .then(user => {\r\n      if(user){\r\n        return events\r\n        .findAll({\r\n          where: {\r\n            userId: userId\r\n          }\r\n        })\r\n        .then(userEvents => res.status(200).send(userEvents))\r\n      } else {\r\n        res.status(404).send({ message: 'No event found for this user'});\r\n      }\r\n    })\r\n    .catch(error => res.status(404).send({ message: 'User not found'}));\r\n  }\r\n  // controller to get all events\r\n  getEvents(req, res) {\r\n    return events\r\n    .findAll()\r\n    .then(events => {\r\n      if(events) {\r\n        res.status(200).send(events);\r\n      } else {\r\n        res.status(404).send({message: 'No event found'})\r\n      }\r\n    })\r\n    .catch(error => res.status(500).send())\r\n  } \r\n\r\n   // controller to get an events given the event id\r\n  getEvent(req, res) {\r\n    const eventId = parseInt(req.params.eventId);\r\n    return events\r\n    .find({\r\n      where: {\r\n        id: eventId\r\n      }\r\n    })\r\n    .then(event => {\r\n      if(event){\r\n        res.status(200).send(event);\r\n      } else {\r\n        res.status(404).send({ message: 'Event not found'});\r\n      }\r\n    })\r\n    .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // controller to delete\r\n  deleteEvent(req, res) {\r\n    const eventId = parseInt(req.params.eventId);\r\n    const userId = parseInt(req.body.userId);\r\n    return events\r\n    .destroy({\r\n      where: {\r\n        id: eventId,\r\n        userId: userId\r\n      }\r\n    })\r\n    .then(event => res.status(200).send({message: `${event} has ben deleted`}))\r\n    .catch(error => res.status(500).send(error));\r\n  }\r\n};\r\n\r\nexport default EventsController;\r\n"]}