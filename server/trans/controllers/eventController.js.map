{"version":3,"sources":["../../src/controllers/eventController.js"],"names":["functs","EventsController","events","req","res","eventId","getField","newEvent","centerName","body","location","facilities","typeOfEvent","dateOfEvent","cost","centerId","ownerId","push","status","send","id","parseInt","params","getEvent","getObject","eventHolder","event","eventPos","indexOf","message","eventsCollector","length","eventCollector"],"mappings":"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","file":"eventController.js","sourcesContent":["import events from './../models/eventsModel';\r\nimport eventCenters from './../models/eventCentersModel';\r\nimport Functs from './../funcs/funcs';\r\n// import EventCenterController from './'\r\nconst functs = new Functs();\r\n\r\n\r\nconst EventsController = class {\r\n  constructor() {\r\n    this.events = events;\r\n  }\r\n\r\n  // controller to add event\r\n  addEvent(req, res) {\r\n   const eventId = functs.getField(events, 'eventId') + 1;\r\n    const newEvent = {\r\n\t\t  eventId,\r\n\t\t  centerName: req.body.centerName,\r\n      location: req.body.location,\r\n\t\t  facilities: req.body.facilities,\r\n\t\t  typeOfEvent: req.body.typeOfEvent,\r\n      dateOfEvent: req.body.cost,\r\n      centerId: req.body.centerId,\r\n      ownerId: req.body.ownerId\r\n    };\r\n    events.push(newEvent);\r\n    res.status(201).send(newEvent);\r\n  }\r\n\r\n  // controll to update event\r\n  updateEvent(req, res) {\r\n    const id = parseInt(req.params.eventId);\r\n    const getEvent = functs.getObject(events, id);\r\n    let newEvent;\r\n    let eventHolder;\r\n    for (let event of events) {\r\n      if (event.eventId === id) {\r\n        eventHolder = event;\r\n        const eventId = id;\r\n\t\t\t  const centerName = req.body.centerName || event[centerName];\r\n        const location = req.body.location || event[location];\r\n        const facilities = req.body.facilities || event[facilities];\r\n        const typeOfEvent = req.body.typeOfEvent || event[typeOfEvent];\r\n        const dateOfEvent = req.body.dateOfEvent || event[dateOfEvent];\r\n        const centerId = req.body.centerId || event[centerId];\r\n        const ownerId = req.body.ownerId || event[ownerId];\r\n        newEvent = {\r\n          eventId,\r\n          centerName,\r\n          location,\r\n          facilities,\r\n          typeOfEvent,\r\n          dateOfEvent,\r\n          centerId,\r\n          ownerId,\r\n        };\r\n      }\r\n    }\r\n    const eventPos = events.indexOf(eventHolder);\r\n    if (events[eventPos] = newEvent) {\r\n      res.status(200).send(newEvent);\r\n    } else {\r\n      res.status(404).send({ message: 'Not Found: no action taken' });\r\n    }\r\n  }\r\n\r\n  // controller to get all events given the centerId\r\n  getCenterEvents(req, res) {\r\n    const centerId = parseInt(req.params.centerId);\r\n    const eventsCollector = [];\r\n    for(let event of events) {\r\n      if(event['centerId'] === centerId) {\r\n        eventsCollector.push(event);\r\n      }\r\n    }\r\n    if(eventsCollector.length > 0) {\r\n      res.status(200).send(eventsCollector);\r\n    } else {\r\n      res.status(404).send({ message: 'No event found' });\r\n    }\r\n  }\r\n\r\n  // controller to get all events given a ownerId \r\n  getUsersEvents(req, res) {\r\n  \tconst ownerId = parseInt(req.params.ownerId);\r\n  \tconst eventCollector = [];\r\n  \tfor (let event of events) {\r\n  \t\tif (event['ownerId'] === ownerId) {\r\n  \t\t\teventCollector.push(event);\r\n  \t\t}\r\n  \t}\r\n  \tif (eventCollector.length > 0) {\r\n  \t\tres.status(200).send(eventCollector);\r\n  \t} else {\r\n  \t\tres.status(404).send({ message: 'Event not found'});\r\n  \t}\r\n  }\r\n  // controller to get all events\r\n  getEvents(req, res) {\r\n    if(events){\r\n      res.status(200).send(events);\r\n    } else {\r\n      res.status(404).send({ message:'Not found'});\r\n    }\r\n  } \r\n\r\n   // controller to get an events given the event id\r\n  getEvent(req, res) {\r\n    const eventId = parseInt(req.params.eventId);\r\n    for(let event of events) {\r\n      if(event['eventId'] === eventId){\r\n        res.status(200).send(event);\r\n        break;\r\n      } \r\n    } \r\n    res.status(404).send({ message:'Not found'} );\r\n  }\r\n\r\n  // controller to delete\r\n  deleteEvent(req, res) {\r\n   const eventId = parseInt(req.params.eventId);\r\n    for (let event of events) {\r\n      if (event['eventId'] === eventId) {\r\n        delete events[event];\r\n        res.status(200).send({ message: 'deleted'});\r\n        break;\r\n      }\r\n    }\r\n    res.status(404).send({ message:'Event not found, no action taken' });\r\n  }\r\n};\r\n\r\nexport default EventsController;\r\n"]}