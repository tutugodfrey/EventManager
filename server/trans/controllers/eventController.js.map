{"version":3,"sources":["../../src/controllers/eventController.js"],"names":["events","centers","users","EventsController","req","res","centerId","parseInt","body","find","where","id","then","eventCenter","eventDate","eventFound","destination","file","path","create","eventType","facilities","imgUrl","userId","status","send","event","catch","error","message","eventId","params","user","update","confirm","updatedEvent","findAll","centerEvents","length","userEvents","allEvents","destroy"],"mappings":"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","file":"eventController.js","sourcesContent":["\r\nimport models from './../models';\r\nimport { getImgUrl } from './../funcs/HelperFuncts';\r\n\r\nconst { events, centers, users } = models;\r\nconst EventsController = class {\r\n  /* eslint-disable class-methods-use-this */\r\n  // controller to add event\r\n  addEvent(req, res) {\r\n    const centerId = parseInt(req.body.centerId, 10);\r\n    return centers\r\n      .find({\r\n        where: {\r\n          id: centerId,\r\n        },\r\n      })\r\n      .then((eventCenter) => {\r\n        if (eventCenter) {\r\n          return events\r\n            .find({\r\n              where: {\r\n                centerId,\r\n                eventDate: req.body.eventDate,\r\n              },\r\n            })\r\n            .then((eventFound) => {\r\n              if (!eventFound) {\r\n                // const destination = 'req.file.path;'\r\n                const destination = getImgUrl(req.file.path);\r\n                return events\r\n                  .create({\r\n                    eventType: req.body.eventType,\r\n                    eventDate: req.body.eventDate,\r\n                    facilities: req.body.facilities,\r\n                    imgUrl: destination,\r\n                    centerId: parseInt(req.body.centerId, 10),\r\n                    userId: parseInt(req.body.userId, 10),\r\n                  })\r\n                  .then(event => res.status(201).send(event))\r\n                  .catch(error => res.status(400).send(error));\r\n              }\r\n              return res.status(200).send({\r\n                message: `An event is already booked you choose. \r\n                pleasee center the field for upcomming event and centers before choosing you date`,\r\n              });\r\n            })\r\n            .catch(error => res.status(500).send(error));\r\n        }\r\n        return res.status(404).send({ message: 'Center not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // controll to update event\r\n  updateEvent(req, res) {\r\n    const userId = parseInt(req.body.userId, 10);\r\n    const eventId = parseInt(req.params.eventId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          return events\r\n            .find({\r\n              where: {\r\n                userId,\r\n                id: eventId,\r\n              },\r\n            })\r\n            .then((event) => {\r\n              if (event) {\r\n                return event\r\n                  .update({\r\n                    eventType: req.body.eventType || event.eventType,\r\n                    eventDate: req.body.eventDate || event.eventDate,\r\n                    facilities: req.body.facilities || event.facilities,\r\n                    imgUrl: req.body.imgUrl || event.imgUrl,\r\n                    confirm: req.body.confirm || event.confirm,\r\n                    userId: req.body.userId || event.userId,\r\n                    centerId: req.body.centerId || event.centerId,\r\n                  })\r\n                  .then(updatedEvent => res.status(201).send(updatedEvent))\r\n                  .catch(error => res.status(500).send(error));\r\n              }\r\n              return res.status(404).send({ message: 'You have not added any event' });\r\n            })\r\n            .catch(error => res.status(500).send(error));\r\n        }\r\n        return res.status(404).send({ message: 'Your are not a registered user' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // controller to get all events given the centerId\r\n  getCenterEvents(req, res) {\r\n    const centerId = parseInt(req.params.centerId, 10);\r\n    return centers\r\n      .find({\r\n        where: {\r\n          id: centerId,\r\n        },\r\n      })\r\n      .then((eventCenter) => {\r\n        if (eventCenter) {\r\n          return events\r\n            .findAll({\r\n              where: {\r\n                centerId,\r\n              },\r\n            })\r\n            .then((centerEvents) => {\r\n              if (centerEvents.length > 0) {\r\n                res.status(200).send(centerEvents);\r\n              }\r\n              return res.status(404).send({ message: 'No event found for this center' });\r\n            })\r\n            .catch((error) => {\r\n              res.status(404).send({\r\n                error,\r\n                message: 'No event found for this center',\r\n              });\r\n            });\r\n        }\r\n        return res.status(404).send({ message: 'Center not found' });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n  // controller to get all events given a userId\r\n  getUsersEvents(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          return events\r\n            .findAll({\r\n              where: {\r\n                userId,\r\n              },\r\n            })\r\n            .then(userEvents => res.status(200).send(userEvents))\r\n            .catch(error => res.status(404).send(error));\r\n        }\r\n        return res.status(404).send({ message: 'No event found for this user' });\r\n      })\r\n      .catch((error) => {\r\n        res.status(404).send({\r\n          error,\r\n          message: 'User not found',\r\n        });\r\n      });\r\n  }\r\n  // controller to get all events\r\n  getEvents(req, res) {\r\n    return events\r\n      .findAll()\r\n      .then((allEvents) => {\r\n        if (allEvents) {\r\n          res.status(200).send(allEvents);\r\n        }\r\n        return res.status(404).send({ message: 'No event found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // controller to get an events given the event id\r\n  getEvent(req, res) {\r\n    const eventId = parseInt(req.params.eventId, 10);\r\n    return events\r\n      .find({\r\n        where: {\r\n          id: eventId,\r\n        },\r\n      })\r\n      .then((event) => {\r\n        if (event) {\r\n          res.status(200).send(event);\r\n        }\r\n        return res.status(404).send({ message: 'Event not found' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // controller to delete\r\n  deleteEvent(req, res) {\r\n    const eventId = parseInt(req.params.eventId, 10);\r\n    const userId = parseInt(req.body.userId, 10);\r\n    return events\r\n      .destroy({\r\n        where: {\r\n          userId,\r\n          id: eventId,\r\n        },\r\n      })\r\n      .then(event => res.status(200).send({ message: `${event} has ben deleted` }))\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n};\r\n\r\nexport default EventsController;\r\n"]}