{"version":3,"sources":["../../src/controllers/notificationsController.js"],"names":["notifications","users","Notifications","req","res","userType","body","userId","parseInt","message","find","where","id","then","user","create","status","send","created","catch","error","params","findAll","allNotifications","all"],"mappings":"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","file":"notificationsController.js","sourcesContent":["import models from './../models';\r\n\r\nconst { notifications, users } = models;\r\nconst Notifications = class {\r\n  /* eslint-disable class-methods-use-this */\r\n  // to post notification to db table as well send an email\r\n  createNotification(req, res) {\r\n    const userType = req.body.userType;\r\n    if (userType === 'admin') {\r\n      const userId = parseInt(req.body.userId, 10);\r\n      const message = req.body.message;\r\n      return users\r\n        .find({\r\n          where: {\r\n            id: userId,\r\n            userType: 'regular',\r\n          },\r\n        })\r\n        .then((user) => {\r\n          if (user) {\r\n            return notifications\r\n              .create({\r\n                message,\r\n                userId,\r\n              })\r\n              .then(created => res.status(201).send(created))\r\n              .catch(error => res.status(500).send(error));\r\n          } else {\r\n\t\t\t\t\t\treturn res.status(404).send({ message: 'User not found' });\r\n\t\t\t\t\t}\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n    } else {\r\n\t\t\treturn res.status(402).send({ message: 'Your are not allowed to perform this action' });\r\n\t\t}\r\n  }\r\n\r\n  getNotifications(req, res) {\r\n    const userId = parseInt(req.params.userId, 10);\r\n    return users\r\n      .find({\r\n        where: {\r\n          id: userId,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          return notifications\r\n            .findAll({\r\n              where: {\r\n                userId,\r\n              },\r\n            })\r\n            .then(allNotifications => res.status(200).send(allNotifications))\r\n            .catch((error) => {\r\n              res.status(404).send({\r\n                error,\r\n                message: 'No new notification',\r\n              });\r\n            });\r\n        }\r\n        return res.status(404).send({ message: 'Not a registered user' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n  // get all notification\r\n  getAllNotifications(req, res) {\r\n    return notifications\r\n      .all()\r\n      .then(allNotifications => res.status(200).send(allNotifications))\r\n      .catch((error) => {\r\n        res.status(404).send({\r\n          error,\r\n          message: 'No new notification',\r\n        });\r\n      });\r\n  }\r\n};\r\nexport default Notifications;\r\n"]}