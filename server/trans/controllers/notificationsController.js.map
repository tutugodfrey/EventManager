{"version":3,"sources":["../../src/controllers/notificationsController.js"],"names":["notifications","users","Notifications","req","res","userType","body","console","log","userId","parseInt","message","find","where","id","then","user","userEmail","email","create","status","send","created","catch","error","params","findAll","all"],"mappings":"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","file":"notificationsController.js","sourcesContent":["import models from './../models';\r\nconst notifications = models.notifications;\r\nconst users = models.users;\r\n\r\nconst Notifications = class {\r\n\t// to post notification to db table as well send an email\r\n  createNotification(req, res) {\r\n  \tconst userType = req.body.userType;\r\n\t\tconsole.log(\"got to notification\")\r\n  \tif(userType === 'admin'){\r\n  \t\tconst userId = parseInt(req.body.userId);\r\n  \t\tconst message = req.body.message;\r\n  \t\treturn users\r\n  \t\t.find({\r\n  \t\t\twhere: {\r\n\t\t\t\t\tid: userId,\r\n\t\t\t\t\tuserType:'regular'\r\n  \t\t\t}\r\n  \t\t})\r\n  \t\t.then(user => {\r\n  \t\t\tif(user){\r\n\t\t\t\tconst userEmail = user.email;\r\n  \t\t\treturn notifications\r\n  \t\t\t\t.create({\r\n  \t\t\t\t\tmessage:message,\r\n  \t\t\t\t\tuserId:userId\r\n  \t\t\t\t})\r\n  \t\t\t\t.then(created => res.status(201).send(created))\r\n  \t\t\t\t.catch(error => res.status(500).send(error));\r\n  \t\t\t} else {\r\n  \t\t\t\tres.status(404).send({ message:'User not found'})\r\n  \t\t\t}\r\n  \t\t})\r\n  \t\t.catch(error => res.status(500).send(error));\r\n  \t} else {\r\n\t\t\tres.status(402).send({ message: 'Your are not allowed to perform this action'})\r\n\t\t}\r\n  }\r\n\r\n\tgetNotifications (req, res) {\r\n\t\tconst userId = parseInt(req.params.userId);\r\n\t\treturn users\r\n\t\t.find({\r\n\t\t\twhere:{\r\n\t\t\t\tid:userId\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(user => {\r\n\t\t\tif(user){\r\n\t\t\t\treturn notifications\r\n\t\t\t\t.findAll({\r\n\t\t\t\t\twhere: {\r\n\t\t\t\t\t\tuserId: userId\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.then(notifications => res.status(200).send(notifications))\r\n\t\t\t\t.catch(error => res.status(404).send({message: 'No new notification'}));\r\n\t\t\t} else {\r\n\t\t\t\tres.status(404).send({message: 'Not a registered user'});\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => res.status(500).send(error));\r\n\t}\r\n\t// get all notification\r\n\tgetAllNotifications (req, res) {\r\n\t\treturn notifications\r\n\t\t.all()\r\n\t\t.then(notifications => res.status(200).send(notifications))\r\n\t\t.catch(error => res.status(404).send({message: 'No new notification'}));\r\n\r\n\t}\r\n}\r\n\r\nexport default Notifications;"]}