{"version":3,"sources":["../../src/controllers/eventCenterController.js"],"names":["centers","EventCenterController","req","res","body","userType","find","where","centerName","location","then","eventCenter","destination","file","path","create","sits","parseInt","cost","facilities","imgUrl","userId","status","send","center","catch","error","message","findAll","centerId","params","id","name","eventCenters","update","updatedCenter","destroy"],"mappings":"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","file":"eventCenterController.js","sourcesContent":["\r\nimport models from './../models';\r\nimport { getImgUrl } from './..//funcs/HelperFuncts';\r\n\r\nconst { centers } = models;\r\nconst EventCenterController = class {\r\n  /* eslint-disable class-methods-use-this */\r\n  // add a new event center\r\n  addEventCenter(req, res) {\r\n    if (req.body.userType === 'admin') {\r\n      return centers\r\n        .find({\r\n          where: {\r\n            centerName: req.body.centerName,\r\n            location: req.body.location,\r\n          },\r\n        })\r\n        .then((eventCenter) => {\r\n          if (!eventCenter) {\r\n            const destination = getImgUrl(req.file.path);\r\n            return centers\r\n              .create({\r\n                centerName: req.body.centerName,\r\n                location: req.body.location,\r\n                sits: parseInt(req.body.sits, 10),\r\n                cost: parseInt(req.body.cost, 10),\r\n                facilities: req.body.facilities,\r\n                imgUrl: destination,\r\n                userId: parseInt(req.body.userId, 10),\r\n              })\r\n              .then(center => res.status(201).send(center))\r\n              .catch(error => res.status(400).send(error));\r\n          }\r\n          return res.status(200).send({ message: 'a center with this name already exist' });\r\n        })\r\n        .catch(error => res.status(404).send(error));\r\n    }\r\n    return res.status(402).send({ message: 'You are not allowed to perform this action' });\r\n  }\r\n\r\n  //  return all event centers\r\n  getEventCenters(req, res) {\r\n    return centers\r\n      .findAll()\r\n      .then((eventCenter) => {\r\n        if (eventCenter) {\r\n          res.status(200).send(eventCenter);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        return res.status(404).send({\r\n          error,\r\n          message: 'No event center found',\r\n        });\r\n      });\r\n  }\r\n\r\n  // an event center given its it id is present\r\n  getEventCenter(req, res) {\r\n    const centerId = parseInt(req.params.centerId, 10);\r\n    return centers\r\n      .find({\r\n        where: {\r\n          id: centerId,\r\n        },\r\n      })\r\n      .then((eventCenter) => {\r\n        if (eventCenter) {\r\n          res.status(200).send(eventCenter);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        return res.status(404).send({\r\n          error,\r\n          message: 'No center is found matching this Id',\r\n        });\r\n      });\r\n  }\r\n\r\n  // get an event center by name\r\n  getCenterByName(req, res) {\r\n    return centers\r\n      .find({\r\n        where: {\r\n          name: req.params.name,\r\n        },\r\n      })\r\n      .then((eventCenter) => {\r\n        if (eventCenter) {\r\n          return res.status(200).send(eventCenter);\r\n        }\r\n        return res.status(404).send({ message: 'No center found for this name' });\r\n      })\r\n      .catch((error) => {\r\n        return res.status(204).send({\r\n          error,\r\n          message: 'No center is found matching this Id',\r\n        });\r\n      });\r\n  }\r\n  // get an event center by location\r\n  getCenterByLocation(req, res) {\r\n    return centers\r\n      .find({\r\n        where: {\r\n          location: req.params.location,\r\n        },\r\n      })\r\n      .then((eventCenters) => {\r\n        if (eventCenters) {\r\n          res.status(200).send(eventCenters);\r\n        }\r\n      })\r\n      .catch(error => res.status(204).send({\r\n        error,\r\n        message: 'No center is found matching this Id',\r\n      }));\r\n  }\r\n\r\n  updateEventCenter(req, res) {\r\n    if (req.body.userType === 'admin') {\r\n      const centerId = parseInt(req.params.centerId, 10);\r\n      return centers\r\n        .find({\r\n          where: {\r\n            id: centerId,\r\n          },\r\n        })\r\n        .then((eventCenter) => {\r\n          if (eventCenter) {\r\n            return eventCenter\r\n              .update({\r\n                centerName: req.body.centerName || eventCenter.centerName,\r\n                location: req.body.location || eventCenter.location,\r\n                sits: req.body.sits || eventCenter.sits,\r\n                cost: req.body.cost || eventCenter.cost,\r\n                facilities: req.body.facilities || eventCenter.facilities,\r\n              })\r\n              .then(updatedCenter => res.status(201).send(updatedCenter))\r\n              .catch(() => res.status(404).send({ message: 'update fail' }));\r\n          }\r\n          return res.status(404).send({ message: 'Event center not found' });\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n    }\r\n    return res.status(404).send({ message: 'Event center not found' });\r\n  }\r\n\r\n  deleteEventCenter(req, res) {\r\n    if (req.body.userType === 'admin') {\r\n      const centerId = parseInt(req.params.centerId, 10);\r\n      return centers\r\n        .find({\r\n          where: {\r\n            id: centerId,\r\n          },\r\n        })\r\n        .then((eventCenter) => {\r\n          if (eventCenter) {\r\n            return eventCenter\r\n              .destroy({\r\n                where: {\r\n                  id: centerId,\r\n                },\r\n              })\r\n              .then(() => {\r\n                return res.status(200).send({ message: 'center has been deleted' });\r\n              });\r\n          }\r\n          return res.status(404).send({ message: 'center not found' });\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n    }\r\n    return res.status(404).send({ message: 'you are not allowed to perform this action' });\r\n  }\r\n};\r\nexport default EventCenterController;\r\n"]}