{"version":3,"sources":["../../src/controllers/eventCenterController.js"],"names":["functs","EventCenterController","eventCenters","req","res","id","getId","newEventCenter","centerName","body","location","facilities","cost","push","status","send","centerId","parseInt","params","getEventCenterId","verifyId","eventCenter","eventCenterPos","indexOf"],"mappings":";;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA;AACA,IAAMA,SAAS,qBAAf;;AAEA,IAAMC;AACJ,mCAAc;AAAA;;AACZ,SAAKC,YAAL;AACD;AACD;;;AAJI;AAAA;AAAA,mCAKWC,GALX,EAKgBC,GALhB,EAKqB;AACvB,UAAMC,KAAKL,OAAOM,KAAP,6BAAX;AACA,UAAMC,iBAAiB;AACtBF,cADsB;AAErBG,oBAAYL,IAAIM,IAAJ,CAASD,UAFA;AAGrBE,kBAAUP,IAAIM,IAAJ,CAASC,QAHE;AAIrBC,oBAAYR,IAAIM,IAAJ,CAASE,UAJA;AAKrBC,cAAMT,IAAIM,IAAJ,CAASG;AALM,OAAvB;AAOA,kCAAaC,IAAb,CAAkBN,cAAlB;AACAH,UAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBR,cAArB;AACD;AACD;;AAjBI;AAAA;AAAA,oCAkBYJ,GAlBZ,EAkBiBC,GAlBjB,EAkBsB;AACxBA,UAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACD;AACD;;AArBI;AAAA;AAAA,mCAsBWZ,GAtBX,EAsBgBC,GAtBhB,EAsBqB;AACvB,UAAMY,WAAWC,SAASd,IAAIe,MAAJ,CAAWF,QAApB,CAAjB;AACA,UAAMG,mBAAmBnB,OAAOoB,QAAP,8BAA8BJ,QAA9B,CAAzB;AAFuB;AAAA;AAAA;;AAAA;AAGvB,sLAAwC;AAAA,cAA7BK,WAA6B;;AACtC,cAAIA,YAAYhB,EAAZ,KAAmBW,QAAvB,EAAiC;AAC/BZ,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,WAArB;AACD,WAFD,MAEO;AACLjB,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACD;AACF;AATsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUxB;AAhCG;AAAA;AAAA,sCAkCcZ,GAlCd,EAkCmBC,GAlCnB,EAkCwB;AAC1B,UAAMY,WAAWC,SAASd,IAAIe,MAAJ,CAAWF,QAApB,CAAjB;AACA,UAAMG,mBAAmBnB,OAAOoB,QAAP,8BAA8BJ,QAA9B,CAAzB;AACA,UAAIT,uBAAJ;AAH0B;AAAA;AAAA;;AAAA;AAI1B,4LAAwC;AAAA,cAA7Bc,WAA6B;;AACtC,cAAIA,YAAYhB,EAAZ,KAAmBW,QAAvB,EAAiC;AAClC,gBAAMR,aAAaL,IAAIM,IAAJ,CAASD,UAAT,IAAuBa,YAAYb,UAAZ,CAA1C;AACG,gBAAME,WAAWP,IAAIM,IAAJ,CAASC,QAAT,IAAqBW,YAAYX,QAAZ,CAAtC;AACA,gBAAMC,aAAaR,IAAIM,IAAJ,CAASE,UAAT,IAAuBU,YAAYV,UAAZ,CAA1C;AACA,gBAAMC,OAAOT,IAAIM,IAAJ,CAASG,IAAT,IAAiBS,YAAYT,IAAZ,CAA9B;AACHL,6BAAiB;AACZS,gCADY;AAEZR,oCAFY;AAGZG,oCAHY;AAIZC,wBAJY;AAKZF;AALY,aAAjB;AAOA;AACD;AAlB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmB3BY,uBAAiBC,QAAQhB,cAAR,CAAjB;AACC,UAAI,4BAAae,cAAb,IAA+Bf,cAAnC,EAAmD;AACjDH,YAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBR,cAArB;AACD,OAFD,MAEO;AACLH,YAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,WAArB;AACD;AACF;AA3DG;;AAAA;AAAA,GAAN;kBA6Ded,qB","file":"eventCenterController.js","sourcesContent":["\r\nimport events from './../models/eventsModel';\r\nimport eventCenters from './../models/eventCentersModel';\r\nimport Functs from './../funcs/funcs';\r\n// import EventCenterController from './'\r\nconst functs = new Functs();\r\n\r\nconst EventCenterController = class {\r\n  constructor() {\r\n    this.eventCenters = eventCenters;\r\n  }\r\n  // add a new event center\r\n  addEventCenter(req, res) {\r\n    const id = functs.getId(eventCenters);\r\n    const newEventCenter = {\r\n\t\t  \tid,\r\n      centerName: req.body.centerName,\r\n      location: req.body.location,\r\n      facilities: req.body.facilities,\r\n      cost: req.body.cost,\r\n    };\r\n    eventCenters.push(newEventCenter);\r\n    res.status(201).send(newEventCenter);\r\n  }\r\n  //  return all event centers\r\n  getEventCenters(req, res) {\r\n    res.status(200).send(eventCenters);\r\n  }\r\n  // an event center given its it id is present\r\n  getEventCenter(req, res) {\r\n    const centerId = parseInt(req.params.centerId);\r\n    const getEventCenterId = functs.verifyId(eventCenters, centerId);\r\n    for (const eventCenter of eventCenters) {\r\n      if (eventCenter.id === centerId) {\r\n        res.status(200).send(eventCenter);\r\n      } else {\r\n        res.status(404).send('Center not Found');\r\n      }\r\n    }\r\n  }\r\n\r\n  updateEventCenter(req, res) {\r\n    const centerId = parseInt(req.params.centerId);\r\n    const getEventCenterId = functs.verifyId(eventCenters, centerId);\r\n    let newEventCenter;\r\n    for (const eventCenter of eventCenters) {\r\n      if (eventCenter.id === centerId) {\r\n\t\t\t  const centerName = req.body.centerName || eventCenter[centerName];\r\n        const location = req.body.location || eventCenter[location];\r\n        const facilities = req.body.facilities || eventCenter[facilities];\r\n        const cost = req.body.cost || eventCenter[cost];\r\n\t\t\t  newEventCenter = {\r\n          centerId,\r\n          centerName,\r\n          facilities,\r\n          cost,\r\n          location,\r\n\t\t    };\r\n\t  \t}\r\n\t  }\r\n\t  eventCenterPos = indexOf(newEventCenter);\r\n    if (eventCenters[eventCenterPos] = newEventCenter) {\r\n      res.status(200).send(newEventCenter);\r\n    } else {\r\n      res.status(404).send('Not Found');\r\n    }\r\n  }\r\n};\r\nexport default EventCenterController;\r\n"]}