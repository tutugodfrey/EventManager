{"version":3,"sources":["../../src/funcs/HelperFuncts.js"],"names":["HelperFuncts","listOfObj","fieldToGet","total","length","lastObj","fieldValue","arrayOfObjects","objectRef","objectField","foreach","objCollection","objCollector","field","undefined","getImgUrl","path","newPath","replace","indexOf","indexOfPublic","relPath","substr"],"mappings":";;;;;;;;;;AAAA;;;AAGA,IAAMA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACJ;AACA;;;;;;AAFI,6BAQKC,SARL,EAQgBC,UARhB,EAQ4B;AAC9B,UAAMC,QAAQF,UAAUG,MAAV,GAAmB,CAAjC;AACA,UAAMC,UAAUJ,UAAUE,KAAV,CAAhB;AACA,UAAMG,aAAaD,QAAQH,UAAR,CAAnB;AACA,aAAOI,UAAP;AACD;;AAED;;;;;AAfI;AAAA;AAAA,8BAmBMC,cAnBN,EAmBsBC,SAnBtB,EAmBiC;AACnC,UAAID,eAAeC,SAAf,CAAJ,EAA+B;AAC7B,eAAOD,eAAeC,SAAf,CAAP;AACD;AACD,aAAO,kBAAP;AACD;;AAED;;;;;;;;AA1BI;AAAA;AAAA,qCAiCaD,cAjCb,EAiC6BE,WAjC7B,EAiC0CH,UAjC1C,EAiCsD;AACxDC,qBAAeG,OAAf,CAAuB,UAACC,aAAD,EAAmB;AACxC,YAAIA,cAAcF,WAAd,MAA+BH,UAAnC,EAA+C;AAC7C,iBAAOK,aAAP;AACD;AACD,yCAA+BF,WAA/B;AACD,OALD;AAMD;;AAED;;;;;;AA1CI;AAAA;AAAA,8BA+CMG,YA/CN,EA+CoBC,KA/CpB,EA+C2B;AAC7B,UAAID,aAAaC,KAAb,CAAJ,EAAyB;AACvB,eAAOD,aAAaC,KAAb,CAAP;AACD;AACD,aAAOC,SAAP;AACD;AApDG;;AAAA;AAAA,GAAN;;AAuDO,IAAMC,gCAAY,SAAZA,SAAY,CAACC,IAAD,EAAU;AACjC,MAAI,OAAQA,IAAR,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,+BAAP;AACD;AACD,MAAMC,UAAUD,KAAKE,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAhB;AACA,MAAID,QAAQE,OAAR,CAAgB,GAAhB,IAAuB,CAA3B,EAA8B;AAC5B,kCAA4BF,OAA5B;AACD;AACD,MAAMG,gBAAgBH,QAAQE,OAAR,CAAgB,GAAhB,CAAtB;AACA,MAAME,UAAUJ,QAAQK,MAAR,CAAeF,aAAf,EAA8BH,QAAQb,MAAtC,CAAhB;AACA,SAAOiB,OAAP;AACD,CAXM;kBAYQrB,Y","file":"HelperFuncts.js","sourcesContent":["/*\r\n* export a class for working with objects\r\n*/\r\nconst HelperFuncts = class {\r\n  /* eslint-disable class-methods-use-this */\r\n  /*\r\n  * helper class to uniquely assign get and assign integer value (id) to an object\r\n  * check the last element of the array of objects, get the value of the integer field\r\n  * if you are adding an other element to the array increment the value and use it as the\r\n  * the value for the field of the element you are adding\r\n  */\r\n  getField(listOfObj, fieldToGet) {\r\n    const total = listOfObj.length - 1;\r\n    const lastObj = listOfObj[total];\r\n    const fieldValue = lastObj[fieldToGet];\r\n    return fieldValue;\r\n  }\r\n\r\n  /*\r\n  * check whether an object is present in a collection/array and return\r\n  * else return object not found\r\n  */\r\n  getObject(arrayOfObjects, objectRef) {\r\n    if (arrayOfObjects[objectRef]) {\r\n      return arrayOfObjects[objectRef];\r\n    }\r\n    return 'object not found';\r\n  }\r\n\r\n  /*\r\n  * given an array of objects\r\n  * to get an object by checking the value of a field\r\n  * supply the array of objects, the field to check for and the value of the field\r\n  * return the object if the fieldValue match\r\n  * otherwise return error message\r\n  */\r\n  getObjectByField(arrayOfObjects, objectField, fieldValue) {\r\n    arrayOfObjects.foreach((objCollection) => {\r\n      if (objCollection[objectField] === fieldValue) {\r\n        return objCollection;\r\n      }\r\n      return `No object with field ${objectField} found`;\r\n    });\r\n  }\r\n\r\n  /*\r\n  * get the value of a field in an object\r\n  * given the object and the field you wish to get the value\r\n  * return undefined if the field is not found\r\n  */\r\n  getFields(objCollector, field) {\r\n    if (objCollector[field]) {\r\n      return objCollector[field];\r\n    }\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getImgUrl = (path) => {\r\n  if (typeof (path) !== 'string') {\r\n    return 'expected a string as argument';\r\n  }\r\n  const newPath = path.replace(/\\\\/g, '/');\r\n  if (newPath.indexOf('/') < 0) {\r\n    return `Cant resolve path ${newPath}`;\r\n  }\r\n  const indexOfPublic = newPath.indexOf('/');\r\n  const relPath = newPath.substr(indexOfPublic, newPath.length);\r\n  return relPath;\r\n};\r\nexport default HelperFuncts;\r\n"]}