{"version":3,"sources":["../../src/funcs/HelperFuncts.js"],"names":["HelperFuncts","listOfObj","fieldToGet","total","length","lastObj","fieldValue","arrayOfObject","objectRef","objCollection","arrayOfObjects","objectField","objCollector","field","getImgUrl","path","newPath","replace","indexOf","indexOfPublic","relPath","substr"],"mappings":";;;;;;;;;;AAAA;;;AAGA,IAAMA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACKC,SADL,EACgBC,UADhB,EAC6B;AAC/B,UAAMC,QAAQF,UAAUG,MAAV,GAAmB,CAAjC;AACA,UAAMC,UAAUJ,UAAUE,KAAV,CAAhB;AACA,UAAMG,aAAaD,QAAQH,UAAR,CAAnB;AACA,aAAOI,UAAP;AACD;AACD;;AAPI;AAAA;AAAA,8BAQMC,aARN,EAQqBC,SARrB,EAQgC;AAAA;AAAA;AAAA;;AAAA;AACnC,6BAA0BD,aAA1B,8HAAyC;AAAA,cAAhCE,aAAgC;;AACxC,cAAIA,cAAcD,SAAd,CAAJ,EAA8B;AAC1B,mBAAOC,aAAP;AACF;AACF;AALkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnC;AAdG;AAAA;AAAA,qCAgBaC,cAhBb,EAgB6BC,WAhB7B,EAgB0CL,UAhB1C,EAgBuD;AAAA;AAAA;AAAA;;AAAA;AAC1D,8BAA0BI,cAA1B,mIAA0C;AAAA,cAAjCD,aAAiC;;AACzC,cAAIA,cAAcE,WAAd,MAA+BL,UAAnC,EAA+C;AAC3C,mBAAOG,aAAP;AACF;AACD;AALwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMzD,uCAA+BE,WAA/B;AACD;;AAED;;AAzBI;AAAA;AAAA,8BA0BMC,YA1BN,EA0BoBC,KA1BpB,EA0B2B;AAC7B,UAAID,aAAaC,KAAb,CAAJ,EAAyB;AACvB,eAAOD,aAAaC,KAAb,CAAP;AACD;AACD,aAAO,IAAP;AACD;AA/BG;;AAAA;AAAA,GAAN;;AAkCO,IAAMC,gCAAY,SAAZA,SAAY,CAASC,IAAT,EAAe;AACpC,MAAG,OAAOA,IAAP,KAAiB,QAApB,EAA8B;AAC1B,WAAO,+BAAP;AACH,GAFD,MAEO;AACL,QAAMC,UAAUD,KAAKE,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAhB;AACA,QAAID,QAAQE,OAAR,CAAgB,GAAhB,IAAuB,CAA3B,EAA8B;AAC5B,oCAA6BF,OAA7B;AACD,KAFD,MAEO;AACL,UAAMG,gBAAgBH,QAAQE,OAAR,CAAgB,GAAhB,CAAtB;AACF,UAAME,UAAUJ,QAAQK,MAAR,CAAeF,aAAf,EAA8BH,QAAQZ,MAAtC,CAAhB;AACA,aAAOgB,OAAP;AACC;AACF;AACJ,CAbM;;kBAeQpB,Y","file":"HelperFuncts.js","sourcesContent":["/**\r\nthis file will export a class of functions\r\n* */\r\nconst HelperFuncts = class {\r\n  getField(listOfObj, fieldToGet ) {\r\n    const total = listOfObj.length - 1;\r\n    const lastObj = listOfObj[total];\r\n    const fieldValue = lastObj[fieldToGet];\r\n    return fieldValue;\r\n  }\r\n  // function to get an object from a list of object\r\n  getObject(arrayOfObject, objectRef) {\r\n  \tfor (let objCollection of arrayOfObject) {\r\n  \t\tif (objCollection[objectRef]) {\r\n        return objCollection;\r\n    \t}\r\n  \t}\r\n  }\r\n  \r\n  getObjectByField(arrayOfObjects, objectField, fieldValue ) {\r\n  \tfor (let objCollection of arrayOfObjects) {\r\n  \t\tif (objCollection[objectField] === fieldValue) {\r\n        return objCollection;\r\n    \t}\r\n    }\r\n    return `No object with field ${objectField} found`;\r\n  }\r\n\r\n  // funtion to get fields value of an object\r\n  getFields(objCollector, field) {\r\n    if (objCollector[field]) {\r\n      return objCollector[field];\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getImgUrl = function(path) {\r\n    if(typeof(path) !== 'string') {\r\n        return 'expected a string as argument'\r\n    } else {\r\n      const newPath = path.replace(/\\\\/g, '/')\r\n      if (newPath.indexOf('/') < 0) {\r\n        return `Cant resolve path ${ newPath }`\r\n      } else {\r\n        const indexOfPublic = newPath.indexOf('/');\r\n      const relPath = newPath.substr(indexOfPublic, newPath.length);\r\n      return relPath; \r\n      }\r\n    }\r\n}\r\n\r\nexport default HelperFuncts;\r\n"]}